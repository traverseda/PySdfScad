{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hephorge Programmers CAD with advanced features like bevels. Source code Releases","title":"Hephorge"},{"location":"#hephorge","text":"Programmers CAD with advanced features like bevels. Source code Releases","title":"Hephorge"},{"location":"3D_objects/","text":"Primitive Solids Cube cube([10,10,10]); Cylinder cylinder(r=5,h=10); Sphere sphere(r=5);","title":"3D objects"},{"location":"3D_objects/#primitive-solids","text":"","title":"Primitive Solids"},{"location":"3D_objects/#cube","text":"cube([10,10,10]);","title":"Cube"},{"location":"3D_objects/#cylinder","text":"cylinder(r=5,h=10);","title":"Cylinder"},{"location":"3D_objects/#sphere","text":"sphere(r=5);","title":"Sphere"},{"location":"api/","text":"Range Generator that works like an openscad range Source code in pysdfscad/openscad_builtins.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 class Range : \"\"\"Generator that works like an openscad range \"\"\" def __init__ ( self , start , stop , step ): self . start = float ( start ) self . stop = float ( stop ) self . step = float ( step ) def __iter__ ( self ): count = 0 while True : temp = float ( self . start + count * self . step ) if self . step > 0 and temp >= self . stop : break elif self . step < 0 and temp <= self . stop : break yield temp count += 1 def __repr__ ( self ): return f \"[ { self . start } : { self . step } : { self . stop } ]\" div ( left , right ) Openscad compatible division, returns inf on division by zero. Source code in pysdfscad/openscad_builtins.py 51 52 53 54 55 56 def div ( left , right ): \"\"\"Openscad compatible division, returns inf on division by zero. \"\"\" if right == 0 : return float ( \"inf\" ) return left / right","title":"Api"},{"location":"api/#pysdfscad.openscad_builtins.Range","text":"Generator that works like an openscad range Source code in pysdfscad/openscad_builtins.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 class Range : \"\"\"Generator that works like an openscad range \"\"\" def __init__ ( self , start , stop , step ): self . start = float ( start ) self . stop = float ( stop ) self . step = float ( step ) def __iter__ ( self ): count = 0 while True : temp = float ( self . start + count * self . step ) if self . step > 0 and temp >= self . stop : break elif self . step < 0 and temp <= self . stop : break yield temp count += 1 def __repr__ ( self ): return f \"[ { self . start } : { self . step } : { self . stop } ]\"","title":"Range"},{"location":"api/#pysdfscad.openscad_builtins.div","text":"Openscad compatible division, returns inf on division by zero. Source code in pysdfscad/openscad_builtins.py 51 52 53 54 55 56 def div ( left , right ): \"\"\"Openscad compatible division, returns inf on division by zero. \"\"\" if right == 0 : return float ( \"inf\" ) return left / right","title":"div()"},{"location":"transformations/","text":"Transformations From Openscad Movement operations Translate translate([-10,-10,5])cube([10,10,10]); rotate rotate([0,0,45])cube([10,10,10]); CSG operations Under Hephorge most CSG operations support the \"smooth\" argument. Difference difference(){ cube([10,10,10]); translate([12,12,-1])cylinder(r=10,h=12); } difference(smooth = 1){ cube([10,10,10]); translate([12,12,-1])cylinder(r=10,h=12); } Intersection intersection(){ cube([10,10,10]); cylinder(r=10,h=12); } intersection(smooth=1){ cube([10,10,10]); cylinder(r=10,h=12); } Hephorge extentions Blend blend(ratio=0.5){ cube([10,10,10]); translate([5,5,5])sphere(r=10); } Shell Very usefull for making things like pipes or moulds. difference(){ shell(thickness=1)cube([10,10,10]); translate([12,12,-1])cylinder(r=10,h=12); }","title":"Transformations"},{"location":"transformations/#transformations","text":"","title":"Transformations"},{"location":"transformations/#from-openscad","text":"","title":"From Openscad"},{"location":"transformations/#movement-operations","text":"","title":"Movement operations"},{"location":"transformations/#translate","text":"translate([-10,-10,5])cube([10,10,10]);","title":"Translate"},{"location":"transformations/#rotate","text":"rotate([0,0,45])cube([10,10,10]);","title":"rotate"},{"location":"transformations/#csg-operations","text":"Under Hephorge most CSG operations support the \"smooth\" argument.","title":"CSG operations"},{"location":"transformations/#difference","text":"difference(){ cube([10,10,10]); translate([12,12,-1])cylinder(r=10,h=12); } difference(smooth = 1){ cube([10,10,10]); translate([12,12,-1])cylinder(r=10,h=12); }","title":"Difference"},{"location":"transformations/#intersection","text":"intersection(){ cube([10,10,10]); cylinder(r=10,h=12); } intersection(smooth=1){ cube([10,10,10]); cylinder(r=10,h=12); }","title":"Intersection"},{"location":"transformations/#hephorge-extentions","text":"","title":"Hephorge extentions"},{"location":"transformations/#blend","text":"blend(ratio=0.5){ cube([10,10,10]); translate([5,5,5])sphere(r=10); }","title":"Blend"},{"location":"transformations/#shell","text":"Very usefull for making things like pipes or moulds. difference(){ shell(thickness=1)cube([10,10,10]); translate([12,12,-1])cylinder(r=10,h=12); }","title":"Shell"}]}