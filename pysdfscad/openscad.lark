start: value*

?value: "$"? NAME "=" sum ";"    -> assign_var
      | ifelse
      | function_def
      | module_def
      | COMMENT
      | forloop
      | operator

?sum: product
    | sum "+" product   -> add
    | sum "-" product   -> sub

?product: atom
    | sum "?" sum ":" sum  -> conditional_op
    | product "*" atom  -> mul
    | product "/" atom  -> div
    | product "%" atom  -> mod
    | product "^" atom  -> exp
    | product "|" atom  -> or_op
    | product "&&" atom  -> and_op
    | product "!=" atom  -> inequality
    | product "==" atom  -> equality
    | product "<" atom  -> lt_op
    | product ">" atom  -> gt_op

?atom: NUMBER           -> number
     | "-" atom         -> neg
     | "$"? NAME        -> var
     | "(" sum ")"
     | function
     | range
     | vector
     | vector_index

vector_index: sum "[" sum "]"
forloop: "for " "(" combined_args ")" block -> for_loop
operator: NAME "(" combined_args ")" block -> operator_call
block: ifelse 
    | operator
    | "{" value* "}" ";"?
    | ";"

ifelse: "if" "(" sum ")" block ("else"  block )?

function: NAME "(" combined_args ")" -> function_call
function_def: "function" NAME "(" args_definition ")" "=" sum ";"-> function_def

// Defines an operator
module_def: "module" NAME "(" args_definition ")" block -> module_def

range: "[" sum ":" sum ":" sum "]"
    | "[" sum ":" sum "]"

combined_args: args ("," kwargs)*
    | kwargs?

//Like combined args but args are names
args_definition: arg_def_name* ("," kwargs)*
    | kwargs?
arg_def_name:(name ("," name)*)

args: _argvalue ("," _argvalue)*
kwargs: kwargvalue ("," kwargvalue)*
kwargvalue: "$"? NAME  "="  _argvalue
_argvalue: ESCAPED_STRING | sum | function | vector | range

vector: "[" args? "]" -> vector


COMMENT: C_COMMENT | CPP_COMMENT 
name: NAME
_name: NAME

%import common.CNAME -> NAME
%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS_INLINE
%import common.WS
%import common.NEWLINE

%ignore WS
%ignore NEWLINE
